---
name: "Build & Deploy Docker Image"

on:
  push:

permissions:
  contents: read

jobs:
  cli:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        os: [linux]
        arch: [arm64, amd64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version-file: go.mod

      - name: Build the cli
        run: go build -ldflags="-s -w" -o binaries/${{ matrix.os }}/${{ matrix.arch }}/multi-linters .
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0

      - name: Upload artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: cli-${{ matrix.os }}-${{ matrix.arch }}
          path: binaries
          if-no-files-found: error

  git-metadata:
    runs-on: ubuntu-24.04

    outputs:
      epoch: ${{ steps.timestamp.outputs.epoch }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Extract commit timestamp
        id: timestamp
        run: |
          echo "epoch=$(git log -n1 --pretty=%ct)" >> "${GITHUB_OUTPUT}"

      - name: Generate build summary
        run: |
          # We do not want quote expansion for markdown.
          # shellcheck disable=SC2016
          {
            echo '# Extracted metadata'
            echo 'epoch: `${{ steps.timestamp.outputs.epoch }}`'
          } >> "${GITHUB_STEP_SUMMARY}"

  generate:
    runs-on: ubuntu-24.04
    needs: cli

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download cli binaries
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: cli-linux-amd64
          path: binaries

      - name: Generate Dockerfile
        run: |
          chmod +x ./binaries/linux/amd64/multi-linters
          ./binaries/linux/amd64/multi-linters generate > Dockerfile

      - name: Check diffs
        run: git diff --exit-code

  build-deploy:
    runs-on: ubuntu-24.04

    needs:
      - cli
      - generate
      - git-metadata

    steps:
      - name: Download cli binaries
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: binaries
          pattern: cli-*
          merge-multiple: true

      - name: Make cli executable
        run: chmod +x -R binaries

      - name: Docker Metadata action
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        id: meta
        with:
          images: docker.io/lvjp/multi-linter
          labels: "org.opencontainers.image.created={{commit_date 'YYYY-MM-DDTHH:mm:ssZ'}}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          build-contexts: multi-linters-binaries=binaries
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          SOURCE_DATE_EPOCH: ${{ needs.git-metadata.outputs.epoch }}
